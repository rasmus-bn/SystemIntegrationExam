{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar Protobuf = require(\"protobufjs\");\n\nvar fs = require(\"fs\");\n\nvar path = require(\"path\");\n\nvar _ = require(\"lodash\");\n\nfunction joinName(baseName, name) {\n  if (baseName === '') {\n    return name;\n  } else {\n    return baseName + '.' + name;\n  }\n}\n\nfunction getAllServices(obj, parentName) {\n  var objName = joinName(parentName, obj.name);\n\n  if (obj.hasOwnProperty('methods')) {\n    return [[objName, obj]];\n  } else {\n    return obj.nestedArray.map(function (child) {\n      if (child.hasOwnProperty('nested')) {\n        return getAllServices(child, objName);\n      } else {\n        return [];\n      }\n    }).reduce(function (accumulator, currentValue) {\n      return accumulator.concat(currentValue);\n    }, []);\n  }\n}\n\nfunction createDeserializer(cls, options) {\n  return function deserialize(argBuf) {\n    return cls.toObject(cls.decode(argBuf), options);\n  };\n}\n\nfunction createSerializer(cls) {\n  return function serialize(arg) {\n    var message = cls.fromObject(arg);\n    return cls.encode(message).finish();\n  };\n}\n\nfunction createMethodDefinition(method, serviceName, options) {\n  return {\n    path: '/' + serviceName + '/' + method.name,\n    requestStream: !!method.requestStream,\n    responseStream: !!method.responseStream,\n    requestSerialize: createSerializer(method.resolvedRequestType),\n    requestDeserialize: createDeserializer(method.resolvedRequestType, options),\n    responseSerialize: createSerializer(method.resolvedResponseType),\n    responseDeserialize: createDeserializer(method.resolvedResponseType, options),\n    // TODO(murgatroid99): Find a better way to handle this\n    originalName: _.camelCase(method.name)\n  };\n}\n\nfunction createServiceDefinition(service, name, options) {\n  var def = {};\n\n  for (var _i = 0, _a = service.methodsArray; _i < _a.length; _i++) {\n    var method = _a[_i];\n    def[method.name] = createMethodDefinition(method, name, options);\n  }\n\n  return def;\n}\n\nfunction createPackageDefinition(root, options) {\n  var def = {};\n\n  for (var _i = 0, _a = getAllServices(root, ''); _i < _a.length; _i++) {\n    var _b = _a[_i],\n        name = _b[0],\n        service = _b[1];\n    def[name] = createServiceDefinition(service, name, options);\n  }\n\n  return def;\n}\n\nfunction addIncludePathResolver(root, includePaths) {\n  root.resolvePath = function (origin, target) {\n    for (var _i = 0, includePaths_1 = includePaths; _i < includePaths_1.length; _i++) {\n      var directory = includePaths_1[_i];\n      var fullPath = path.join(directory, target);\n\n      try {\n        fs.accessSync(fullPath, fs.constants.R_OK);\n        return fullPath;\n      } catch (err) {\n        continue;\n      }\n    }\n\n    return null;\n  };\n}\n/**\n * Load a .proto file with the specified options.\n * @param filename The file path to load. Can be an absolute path or relative to\n *     an include path.\n * @param options.keepCase Preserve field names. The default is to change them\n *     to camel case.\n * @param options.longs The type that should be used to represent `long` values.\n *     Valid options are `Number` and `String`. Defaults to a `Long` object type\n *     from a library.\n * @param options.enums The type that should be used to represent `enum` values.\n *     The only valid option is `String`. Defaults to the numeric value.\n * @param options.bytes The type that should be used to represent `bytes`\n *     values. Valid options are `Array` and `String`. The default is to use\n *     `Buffer`.\n * @param options.defaults Set default values on output objects. Defaults to\n *     `false`.\n * @param options.arrays Set empty arrays for missing array values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.objects Set empty objects for missing object values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.oneofs Set virtual oneof properties to the present field's\n *     name\n * @param options.includeDirs Paths to search for imported `.proto` files.\n */\n\n\nfunction load(filename, options) {\n  var root = new Protobuf.Root();\n\n  if (!!options.includeDirs) {\n    if (!(options.includeDirs instanceof Array)) {\n      return Promise.reject(new Error('The includeDirs option must be an array'));\n    }\n\n    addIncludePathResolver(root, options.includeDirs);\n  }\n\n  return root.load(filename, options).then(function (loadedRoot) {\n    loadedRoot.resolveAll();\n    return createPackageDefinition(root, options);\n  });\n}\n\nexports.load = load;\n\nfunction loadSync(filename, options) {\n  var root = new Protobuf.Root();\n\n  if (!!options.includeDirs) {\n    if (!(options.includeDirs instanceof Array)) {\n      throw new Error('The include option must be an array');\n    }\n\n    addIncludePathResolver(root, options.includeDirs);\n  }\n\n  var loadedRoot = root.loadSync(filename, options);\n  loadedRoot.resolveAll();\n  return createPackageDefinition(root, options);\n}\n\nexports.loadSync = loadSync;","map":{"version":3,"sources":["/home/hvn15/SchoolProjects/SystemIntegrationExam/reactclient/node_modules/@grpc/proto-loader/build/src/index.js"],"names":["Object","defineProperty","exports","value","Protobuf","require","fs","path","_","joinName","baseName","name","getAllServices","obj","parentName","objName","hasOwnProperty","nestedArray","map","child","reduce","accumulator","currentValue","concat","createDeserializer","cls","options","deserialize","argBuf","toObject","decode","createSerializer","serialize","arg","message","fromObject","encode","finish","createMethodDefinition","method","serviceName","requestStream","responseStream","requestSerialize","resolvedRequestType","requestDeserialize","responseSerialize","resolvedResponseType","responseDeserialize","originalName","camelCase","createServiceDefinition","service","def","_i","_a","methodsArray","length","createPackageDefinition","root","_b","addIncludePathResolver","includePaths","resolvePath","origin","target","includePaths_1","directory","fullPath","join","accessSync","constants","R_OK","err","load","filename","Root","includeDirs","Array","Promise","reject","Error","then","loadedRoot","resolveAll","loadSync"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;;;;;;;;;;;;;AAiBA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIG,CAAC,GAAGH,OAAO,CAAC,QAAD,CAAf;;AACA,SAASI,QAAT,CAAkBC,QAAlB,EAA4BC,IAA5B,EAAkC;AAC9B,MAAID,QAAQ,KAAK,EAAjB,EAAqB;AACjB,WAAOC,IAAP;AACH,GAFD,MAGK;AACD,WAAOD,QAAQ,GAAG,GAAX,GAAiBC,IAAxB;AACH;AACJ;;AACD,SAASC,cAAT,CAAwBC,GAAxB,EAA6BC,UAA7B,EAAyC;AACrC,MAAIC,OAAO,GAAGN,QAAQ,CAACK,UAAD,EAAaD,GAAG,CAACF,IAAjB,CAAtB;;AACA,MAAIE,GAAG,CAACG,cAAJ,CAAmB,SAAnB,CAAJ,EAAmC;AAC/B,WAAO,CAAC,CAACD,OAAD,EAAUF,GAAV,CAAD,CAAP;AACH,GAFD,MAGK;AACD,WAAOA,GAAG,CAACI,WAAJ,CAAgBC,GAAhB,CAAoB,UAAUC,KAAV,EAAiB;AACxC,UAAIA,KAAK,CAACH,cAAN,CAAqB,QAArB,CAAJ,EAAoC;AAChC,eAAOJ,cAAc,CAACO,KAAD,EAAQJ,OAAR,CAArB;AACH,OAFD,MAGK;AACD,eAAO,EAAP;AACH;AACJ,KAPM,EAOJK,MAPI,CAOG,UAAUC,WAAV,EAAuBC,YAAvB,EAAqC;AAAE,aAAOD,WAAW,CAACE,MAAZ,CAAmBD,YAAnB,CAAP;AAA0C,KAPpF,EAOsF,EAPtF,CAAP;AAQH;AACJ;;AACD,SAASE,kBAAT,CAA4BC,GAA5B,EAAiCC,OAAjC,EAA0C;AACtC,SAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAChC,WAAOH,GAAG,CAACI,QAAJ,CAAaJ,GAAG,CAACK,MAAJ,CAAWF,MAAX,CAAb,EAAiCF,OAAjC,CAAP;AACH,GAFD;AAGH;;AACD,SAASK,gBAAT,CAA0BN,GAA1B,EAA+B;AAC3B,SAAO,SAASO,SAAT,CAAmBC,GAAnB,EAAwB;AAC3B,QAAIC,OAAO,GAAGT,GAAG,CAACU,UAAJ,CAAeF,GAAf,CAAd;AACA,WAAOR,GAAG,CAACW,MAAJ,CAAWF,OAAX,EAAoBG,MAApB,EAAP;AACH,GAHD;AAIH;;AACD,SAASC,sBAAT,CAAgCC,MAAhC,EAAwCC,WAAxC,EAAqDd,OAArD,EAA8D;AAC1D,SAAO;AACHnB,IAAAA,IAAI,EAAE,MAAMiC,WAAN,GAAoB,GAApB,GAA0BD,MAAM,CAAC5B,IADpC;AAEH8B,IAAAA,aAAa,EAAE,CAAC,CAACF,MAAM,CAACE,aAFrB;AAGHC,IAAAA,cAAc,EAAE,CAAC,CAACH,MAAM,CAACG,cAHtB;AAIHC,IAAAA,gBAAgB,EAAEZ,gBAAgB,CAACQ,MAAM,CAACK,mBAAR,CAJ/B;AAKHC,IAAAA,kBAAkB,EAAErB,kBAAkB,CAACe,MAAM,CAACK,mBAAR,EAA6BlB,OAA7B,CALnC;AAMHoB,IAAAA,iBAAiB,EAAEf,gBAAgB,CAACQ,MAAM,CAACQ,oBAAR,CANhC;AAOHC,IAAAA,mBAAmB,EAAExB,kBAAkB,CAACe,MAAM,CAACQ,oBAAR,EAA8BrB,OAA9B,CAPpC;AAQH;AACAuB,IAAAA,YAAY,EAAEzC,CAAC,CAAC0C,SAAF,CAAYX,MAAM,CAAC5B,IAAnB;AATX,GAAP;AAWH;;AACD,SAASwC,uBAAT,CAAiCC,OAAjC,EAA0CzC,IAA1C,EAAgDe,OAAhD,EAAyD;AACrD,MAAI2B,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGH,OAAO,CAACI,YAA9B,EAA4CF,EAAE,GAAGC,EAAE,CAACE,MAApD,EAA4DH,EAAE,EAA9D,EAAkE;AAC9D,QAAIf,MAAM,GAAGgB,EAAE,CAACD,EAAD,CAAf;AACAD,IAAAA,GAAG,CAACd,MAAM,CAAC5B,IAAR,CAAH,GAAmB2B,sBAAsB,CAACC,MAAD,EAAS5B,IAAT,EAAee,OAAf,CAAzC;AACH;;AACD,SAAO2B,GAAP;AACH;;AACD,SAASK,uBAAT,CAAiCC,IAAjC,EAAuCjC,OAAvC,EAAgD;AAC5C,MAAI2B,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG3C,cAAc,CAAC+C,IAAD,EAAO,EAAP,CAApC,EAAgDL,EAAE,GAAGC,EAAE,CAACE,MAAxD,EAAgEH,EAAE,EAAlE,EAAsE;AAClE,QAAIM,EAAE,GAAGL,EAAE,CAACD,EAAD,CAAX;AAAA,QAAiB3C,IAAI,GAAGiD,EAAE,CAAC,CAAD,CAA1B;AAAA,QAA+BR,OAAO,GAAGQ,EAAE,CAAC,CAAD,CAA3C;AACAP,IAAAA,GAAG,CAAC1C,IAAD,CAAH,GAAYwC,uBAAuB,CAACC,OAAD,EAAUzC,IAAV,EAAgBe,OAAhB,CAAnC;AACH;;AACD,SAAO2B,GAAP;AACH;;AACD,SAASQ,sBAAT,CAAgCF,IAAhC,EAAsCG,YAAtC,EAAoD;AAChDH,EAAAA,IAAI,CAACI,WAAL,GAAmB,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B;AACzC,SAAK,IAAIX,EAAE,GAAG,CAAT,EAAYY,cAAc,GAAGJ,YAAlC,EAAgDR,EAAE,GAAGY,cAAc,CAACT,MAApE,EAA4EH,EAAE,EAA9E,EAAkF;AAC9E,UAAIa,SAAS,GAAGD,cAAc,CAACZ,EAAD,CAA9B;AACA,UAAIc,QAAQ,GAAG7D,IAAI,CAAC8D,IAAL,CAAUF,SAAV,EAAqBF,MAArB,CAAf;;AACA,UAAI;AACA3D,QAAAA,EAAE,CAACgE,UAAH,CAAcF,QAAd,EAAwB9D,EAAE,CAACiE,SAAH,CAAaC,IAArC;AACA,eAAOJ,QAAP;AACH,OAHD,CAIA,OAAOK,GAAP,EAAY;AACR;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GAbD;AAcH;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAASC,IAAT,CAAcC,QAAd,EAAwBjD,OAAxB,EAAiC;AAC7B,MAAIiC,IAAI,GAAG,IAAIvD,QAAQ,CAACwE,IAAb,EAAX;;AACA,MAAI,CAAC,CAAClD,OAAO,CAACmD,WAAd,EAA2B;AACvB,QAAI,EAAEnD,OAAO,CAACmD,WAAR,YAA+BC,KAAjC,CAAJ,EAA6C;AACzC,aAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,yCAAV,CAAf,CAAP;AACH;;AACDpB,IAAAA,sBAAsB,CAACF,IAAD,EAAOjC,OAAO,CAACmD,WAAf,CAAtB;AACH;;AACD,SAAOlB,IAAI,CAACe,IAAL,CAAUC,QAAV,EAAoBjD,OAApB,EAA6BwD,IAA7B,CAAkC,UAAUC,UAAV,EAAsB;AAC3DA,IAAAA,UAAU,CAACC,UAAX;AACA,WAAO1B,uBAAuB,CAACC,IAAD,EAAOjC,OAAP,CAA9B;AACH,GAHM,CAAP;AAIH;;AACDxB,OAAO,CAACwE,IAAR,GAAeA,IAAf;;AACA,SAASW,QAAT,CAAkBV,QAAlB,EAA4BjD,OAA5B,EAAqC;AACjC,MAAIiC,IAAI,GAAG,IAAIvD,QAAQ,CAACwE,IAAb,EAAX;;AACA,MAAI,CAAC,CAAClD,OAAO,CAACmD,WAAd,EAA2B;AACvB,QAAI,EAAEnD,OAAO,CAACmD,WAAR,YAA+BC,KAAjC,CAAJ,EAA6C;AACzC,YAAM,IAAIG,KAAJ,CAAU,qCAAV,CAAN;AACH;;AACDpB,IAAAA,sBAAsB,CAACF,IAAD,EAAOjC,OAAO,CAACmD,WAAf,CAAtB;AACH;;AACD,MAAIM,UAAU,GAAGxB,IAAI,CAAC0B,QAAL,CAAcV,QAAd,EAAwBjD,OAAxB,CAAjB;AACAyD,EAAAA,UAAU,CAACC,UAAX;AACA,SAAO1B,uBAAuB,CAACC,IAAD,EAAOjC,OAAP,CAA9B;AACH;;AACDxB,OAAO,CAACmF,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar Protobuf = require(\"protobufjs\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar _ = require(\"lodash\");\nfunction joinName(baseName, name) {\n    if (baseName === '') {\n        return name;\n    }\n    else {\n        return baseName + '.' + name;\n    }\n}\nfunction getAllServices(obj, parentName) {\n    var objName = joinName(parentName, obj.name);\n    if (obj.hasOwnProperty('methods')) {\n        return [[objName, obj]];\n    }\n    else {\n        return obj.nestedArray.map(function (child) {\n            if (child.hasOwnProperty('nested')) {\n                return getAllServices(child, objName);\n            }\n            else {\n                return [];\n            }\n        }).reduce(function (accumulator, currentValue) { return accumulator.concat(currentValue); }, []);\n    }\n}\nfunction createDeserializer(cls, options) {\n    return function deserialize(argBuf) {\n        return cls.toObject(cls.decode(argBuf), options);\n    };\n}\nfunction createSerializer(cls) {\n    return function serialize(arg) {\n        var message = cls.fromObject(arg);\n        return cls.encode(message).finish();\n    };\n}\nfunction createMethodDefinition(method, serviceName, options) {\n    return {\n        path: '/' + serviceName + '/' + method.name,\n        requestStream: !!method.requestStream,\n        responseStream: !!method.responseStream,\n        requestSerialize: createSerializer(method.resolvedRequestType),\n        requestDeserialize: createDeserializer(method.resolvedRequestType, options),\n        responseSerialize: createSerializer(method.resolvedResponseType),\n        responseDeserialize: createDeserializer(method.resolvedResponseType, options),\n        // TODO(murgatroid99): Find a better way to handle this\n        originalName: _.camelCase(method.name)\n    };\n}\nfunction createServiceDefinition(service, name, options) {\n    var def = {};\n    for (var _i = 0, _a = service.methodsArray; _i < _a.length; _i++) {\n        var method = _a[_i];\n        def[method.name] = createMethodDefinition(method, name, options);\n    }\n    return def;\n}\nfunction createPackageDefinition(root, options) {\n    var def = {};\n    for (var _i = 0, _a = getAllServices(root, ''); _i < _a.length; _i++) {\n        var _b = _a[_i], name = _b[0], service = _b[1];\n        def[name] = createServiceDefinition(service, name, options);\n    }\n    return def;\n}\nfunction addIncludePathResolver(root, includePaths) {\n    root.resolvePath = function (origin, target) {\n        for (var _i = 0, includePaths_1 = includePaths; _i < includePaths_1.length; _i++) {\n            var directory = includePaths_1[_i];\n            var fullPath = path.join(directory, target);\n            try {\n                fs.accessSync(fullPath, fs.constants.R_OK);\n                return fullPath;\n            }\n            catch (err) {\n                continue;\n            }\n        }\n        return null;\n    };\n}\n/**\n * Load a .proto file with the specified options.\n * @param filename The file path to load. Can be an absolute path or relative to\n *     an include path.\n * @param options.keepCase Preserve field names. The default is to change them\n *     to camel case.\n * @param options.longs The type that should be used to represent `long` values.\n *     Valid options are `Number` and `String`. Defaults to a `Long` object type\n *     from a library.\n * @param options.enums The type that should be used to represent `enum` values.\n *     The only valid option is `String`. Defaults to the numeric value.\n * @param options.bytes The type that should be used to represent `bytes`\n *     values. Valid options are `Array` and `String`. The default is to use\n *     `Buffer`.\n * @param options.defaults Set default values on output objects. Defaults to\n *     `false`.\n * @param options.arrays Set empty arrays for missing array values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.objects Set empty objects for missing object values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.oneofs Set virtual oneof properties to the present field's\n *     name\n * @param options.includeDirs Paths to search for imported `.proto` files.\n */\nfunction load(filename, options) {\n    var root = new Protobuf.Root();\n    if (!!options.includeDirs) {\n        if (!(options.includeDirs instanceof Array)) {\n            return Promise.reject(new Error('The includeDirs option must be an array'));\n        }\n        addIncludePathResolver(root, options.includeDirs);\n    }\n    return root.load(filename, options).then(function (loadedRoot) {\n        loadedRoot.resolveAll();\n        return createPackageDefinition(root, options);\n    });\n}\nexports.load = load;\nfunction loadSync(filename, options) {\n    var root = new Protobuf.Root();\n    if (!!options.includeDirs) {\n        if (!(options.includeDirs instanceof Array)) {\n            throw new Error('The include option must be an array');\n        }\n        addIncludePathResolver(root, options.includeDirs);\n    }\n    var loadedRoot = root.loadSync(filename, options);\n    loadedRoot.resolveAll();\n    return createPackageDefinition(root, options);\n}\nexports.loadSync = loadSync;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}