{"ast":null,"code":"/**\n * @license\n * Copyright 2017 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * @module\n * @private\n */\n'use strict';\n\nvar camelCase = require('lodash.camelcase');\n\nvar client = require('./client');\n\nvar common = require('./common');\n/**\n * Get a function that deserializes a specific type of protobuf.\n * @param {function()} cls The constructor of the message type to deserialize\n * @param {bool=} binaryAsBase64 Deserialize bytes fields as base64 strings\n *     instead of Buffers. Defaults to false\n * @param {bool=} longsAsStrings Deserialize long values as strings instead of\n *     objects. Defaults to true\n * @return {function(Buffer):cls} The deserialization function\n */\n\n\nexports.deserializeCls = function deserializeCls(cls, options) {\n  var conversion_options = {\n    defaults: true,\n    bytes: options.binaryAsBase64 ? String : Buffer,\n    longs: options.longsAsStrings ? String : null,\n    enums: options.enumsAsStrings ? String : null,\n    oneofs: true\n  };\n  /**\n   * Deserialize a buffer to a message object\n   * @param {Buffer} arg_buf The buffer to deserialize\n   * @return {cls} The resulting object\n   */\n\n  return function deserialize(arg_buf) {\n    return cls.toObject(cls.decode(arg_buf), conversion_options);\n  };\n};\n\nvar deserializeCls = exports.deserializeCls;\n/**\n * Get a function that serializes objects to a buffer by protobuf class.\n * @param {function()} Cls The constructor of the message type to serialize\n * @return {function(Cls):Buffer} The serialization function\n */\n\nexports.serializeCls = function serializeCls(cls) {\n  /**\n   * Serialize an object to a Buffer\n   * @param {Object} arg The object to serialize\n   * @return {Buffer} The serialized object\n   */\n  return function serialize(arg) {\n    var message = cls.fromObject(arg);\n    return cls.encode(message).finish();\n  };\n};\n\nvar serializeCls = exports.serializeCls;\n/**\n * Get the fully qualified (dotted) name of a ProtoBuf.Reflect value.\n * @param {ProtoBuf.ReflectionObject} value The value to get the name of\n * @return {string} The fully qualified name of the value\n */\n\nexports.fullyQualifiedName = function fullyQualifiedName(value) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n\n  var name = value.name;\n  var parent_fqn = fullyQualifiedName(value.parent);\n\n  if (parent_fqn !== '') {\n    name = parent_fqn + '.' + name;\n  }\n\n  return name;\n};\n\nvar fullyQualifiedName = exports.fullyQualifiedName;\n/**\n * Return a map from method names to method attributes for the service.\n * @param {ProtoBuf.Service} service The service to get attributes for\n * @param {Object=} options Options to apply to these attributes\n * @return {Object} The attributes map\n */\n\nexports.getProtobufServiceAttrs = function getProtobufServiceAttrs(service, options) {\n  var prefix = '/' + fullyQualifiedName(service) + '/';\n  service.resolveAll();\n  return common.zipObject(service.methodsArray.map(function (method) {\n    return camelCase(method.name);\n  }), service.methodsArray.map(function (method) {\n    return {\n      originalName: method.name,\n      path: prefix + method.name,\n      requestStream: !!method.requestStream,\n      responseStream: !!method.responseStream,\n      requestType: method.resolvedRequestType,\n      responseType: method.resolvedResponseType,\n      requestSerialize: serializeCls(method.resolvedRequestType),\n      requestDeserialize: deserializeCls(method.resolvedRequestType, options),\n      responseSerialize: serializeCls(method.resolvedResponseType),\n      responseDeserialize: deserializeCls(method.resolvedResponseType, options)\n    };\n  }));\n};\n\nvar getProtobufServiceAttrs = exports.getProtobufServiceAttrs;\n\nexports.loadObject = function loadObject(value, options) {\n  var result = {};\n\n  if (!value) {\n    return value;\n  }\n\n  if (value.hasOwnProperty('methods')) {\n    // It's a service object\n    var service_attrs = getProtobufServiceAttrs(value, options);\n    return client.makeClientConstructor(service_attrs);\n  }\n\n  if (value.hasOwnProperty('nested')) {\n    // It's a namespace or root object\n    if (value.nested !== null && value.nested !== undefined) {\n      var values = Object.keys(value.nested).map(key => value.nested[key]);\n      values.forEach(nested => {\n        result[nested.name] = loadObject(nested, options);\n      });\n    }\n\n    return result;\n  } // Otherwise, it's not something we need to change\n\n\n  return value;\n};\n/**\n * The primary purpose of this method is to distinguish between reflection\n * objects from different versions of ProtoBuf.js. This is just a heuristic,\n * checking for properties that are (currently) specific to this version of\n * ProtoBuf.js\n * @param {Object} obj The object to check\n * @return {boolean} Whether the object appears to be a Protobuf.js 6\n *   ReflectionObject\n */\n\n\nexports.isProbablyProtobufJs6 = function isProbablyProtobufJs6(obj) {\n  return typeof obj.root === 'object' && typeof obj.resolve === 'function';\n};","map":{"version":3,"sources":["/home/hvn15/SchoolProjects/SystemIntegrationExam/reactclient/node_modules/grpc/src/protobuf_js_6_common.js"],"names":["camelCase","require","client","common","exports","deserializeCls","cls","options","conversion_options","defaults","bytes","binaryAsBase64","String","Buffer","longs","longsAsStrings","enums","enumsAsStrings","oneofs","deserialize","arg_buf","toObject","decode","serializeCls","serialize","arg","message","fromObject","encode","finish","fullyQualifiedName","value","undefined","name","parent_fqn","parent","getProtobufServiceAttrs","service","prefix","resolveAll","zipObject","methodsArray","map","method","originalName","path","requestStream","responseStream","requestType","resolvedRequestType","responseType","resolvedResponseType","requestSerialize","requestDeserialize","responseSerialize","responseDeserialize","loadObject","result","hasOwnProperty","service_attrs","makeClientConstructor","nested","values","Object","keys","key","forEach","isProbablyProtobufJs6","obj","root","resolve"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;AAKA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;AAEA;;;;;;;;;;;AASAG,OAAO,CAACC,cAAR,GAAyB,SAASA,cAAT,CAAwBC,GAAxB,EAA6BC,OAA7B,EAAsC;AAC7D,MAAIC,kBAAkB,GAAG;AACvBC,IAAAA,QAAQ,EAAE,IADa;AAEvBC,IAAAA,KAAK,EAAEH,OAAO,CAACI,cAAR,GAAyBC,MAAzB,GAAkCC,MAFlB;AAGvBC,IAAAA,KAAK,EAAEP,OAAO,CAACQ,cAAR,GAAyBH,MAAzB,GAAkC,IAHlB;AAIvBI,IAAAA,KAAK,EAAET,OAAO,CAACU,cAAR,GAAyBL,MAAzB,GAAkC,IAJlB;AAKvBM,IAAAA,MAAM,EAAE;AALe,GAAzB;AAOA;;;;;;AAKA,SAAO,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AACnC,WAAOd,GAAG,CAACe,QAAJ,CAAaf,GAAG,CAACgB,MAAJ,CAAWF,OAAX,CAAb,EAAkCZ,kBAAlC,CAAP;AACD,GAFD;AAGD,CAhBD;;AAkBA,IAAIH,cAAc,GAAGD,OAAO,CAACC,cAA7B;AAEA;;;;;;AAKAD,OAAO,CAACmB,YAAR,GAAuB,SAASA,YAAT,CAAsBjB,GAAtB,EAA2B;AAChD;;;;;AAKA,SAAO,SAASkB,SAAT,CAAmBC,GAAnB,EAAwB;AAC7B,QAAIC,OAAO,GAAGpB,GAAG,CAACqB,UAAJ,CAAeF,GAAf,CAAd;AACA,WAAOnB,GAAG,CAACsB,MAAJ,CAAWF,OAAX,EAAoBG,MAApB,EAAP;AACD,GAHD;AAID,CAVD;;AAYA,IAAIN,YAAY,GAAGnB,OAAO,CAACmB,YAA3B;AAEA;;;;;;AAKAnB,OAAO,CAAC0B,kBAAR,GAA6B,SAASA,kBAAT,CAA4BC,KAA5B,EAAmC;AAC9D,MAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C;AACzC,WAAO,EAAP;AACD;;AACD,MAAIC,IAAI,GAAGF,KAAK,CAACE,IAAjB;AACA,MAAIC,UAAU,GAAGJ,kBAAkB,CAACC,KAAK,CAACI,MAAP,CAAnC;;AACA,MAAID,UAAU,KAAK,EAAnB,EAAuB;AACrBD,IAAAA,IAAI,GAAGC,UAAU,GAAG,GAAb,GAAmBD,IAA1B;AACD;;AACD,SAAOA,IAAP;AACD,CAVD;;AAYA,IAAIH,kBAAkB,GAAG1B,OAAO,CAAC0B,kBAAjC;AAEA;;;;;;;AAMA1B,OAAO,CAACgC,uBAAR,GAAkC,SAASA,uBAAT,CAAiCC,OAAjC,EACiC9B,OADjC,EAC0C;AAC1E,MAAI+B,MAAM,GAAG,MAAMR,kBAAkB,CAACO,OAAD,CAAxB,GAAoC,GAAjD;AACAA,EAAAA,OAAO,CAACE,UAAR;AACA,SAAOpC,MAAM,CAACqC,SAAP,CAAiBH,OAAO,CAACI,YAAR,CAAqBC,GAArB,CAAyB,UAASC,MAAT,EAAiB;AAChE,WAAO3C,SAAS,CAAC2C,MAAM,CAACV,IAAR,CAAhB;AACD,GAFuB,CAAjB,EAEHI,OAAO,CAACI,YAAR,CAAqBC,GAArB,CAAyB,UAASC,MAAT,EAAiB;AAC5C,WAAO;AACLC,MAAAA,YAAY,EAAED,MAAM,CAACV,IADhB;AAELY,MAAAA,IAAI,EAAEP,MAAM,GAAGK,MAAM,CAACV,IAFjB;AAGLa,MAAAA,aAAa,EAAE,CAAC,CAACH,MAAM,CAACG,aAHnB;AAILC,MAAAA,cAAc,EAAE,CAAC,CAACJ,MAAM,CAACI,cAJpB;AAKLC,MAAAA,WAAW,EAAEL,MAAM,CAACM,mBALf;AAMLC,MAAAA,YAAY,EAAEP,MAAM,CAACQ,oBANhB;AAOLC,MAAAA,gBAAgB,EAAE7B,YAAY,CAACoB,MAAM,CAACM,mBAAR,CAPzB;AAQLI,MAAAA,kBAAkB,EAAEhD,cAAc,CAACsC,MAAM,CAACM,mBAAR,EAA6B1C,OAA7B,CAR7B;AASL+C,MAAAA,iBAAiB,EAAE/B,YAAY,CAACoB,MAAM,CAACQ,oBAAR,CAT1B;AAULI,MAAAA,mBAAmB,EAAElD,cAAc,CAACsC,MAAM,CAACQ,oBAAR,EAA8B5C,OAA9B;AAV9B,KAAP;AAYD,GAbG,CAFG,CAAP;AAgBD,CApBD;;AAsBA,IAAI6B,uBAAuB,GAAGhC,OAAO,CAACgC,uBAAtC;;AAEAhC,OAAO,CAACoD,UAAR,GAAqB,SAASA,UAAT,CAAoBzB,KAApB,EAA2BxB,OAA3B,EAAoC;AACvD,MAAIkD,MAAM,GAAG,EAAb;;AACA,MAAI,CAAC1B,KAAL,EAAY;AACV,WAAOA,KAAP;AACD;;AACD,MAAIA,KAAK,CAAC2B,cAAN,CAAqB,SAArB,CAAJ,EAAqC;AACnC;AACA,QAAIC,aAAa,GAAGvB,uBAAuB,CAACL,KAAD,EAAQxB,OAAR,CAA3C;AACA,WAAOL,MAAM,CAAC0D,qBAAP,CAA6BD,aAA7B,CAAP;AACD;;AAED,MAAI5B,KAAK,CAAC2B,cAAN,CAAqB,QAArB,CAAJ,EAAoC;AAClC;AACA,QAAI3B,KAAK,CAAC8B,MAAN,KAAiB,IAAjB,IAAyB9B,KAAK,CAAC8B,MAAN,KAAiB7B,SAA9C,EAAyD;AACvD,UAAI8B,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYjC,KAAK,CAAC8B,MAAlB,EAA0BnB,GAA1B,CAA8BuB,GAAG,IAAIlC,KAAK,CAAC8B,MAAN,CAAaI,GAAb,CAArC,CAAb;AACAH,MAAAA,MAAM,CAACI,OAAP,CAAeL,MAAM,IAAI;AACvBJ,QAAAA,MAAM,CAACI,MAAM,CAAC5B,IAAR,CAAN,GAAsBuB,UAAU,CAACK,MAAD,EAAStD,OAAT,CAAhC;AACD,OAFD;AAGD;;AACD,WAAOkD,MAAP;AACD,GApBsD,CAsBvD;;;AACA,SAAO1B,KAAP;AACD,CAxBD;AA0BA;;;;;;;;;;;AASA3B,OAAO,CAAC+D,qBAAR,GAAgC,SAASA,qBAAT,CAA+BC,GAA/B,EAAoC;AAClE,SAAQ,OAAOA,GAAG,CAACC,IAAX,KAAoB,QAArB,IAAmC,OAAOD,GAAG,CAACE,OAAX,KAAuB,UAAjE;AACD,CAFD","sourcesContent":["/**\n * @license\n * Copyright 2017 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * @module\n * @private\n */\n\n'use strict';\n\nvar camelCase = require('lodash.camelcase');\nvar client = require('./client');\nvar common = require('./common');\n\n/**\n * Get a function that deserializes a specific type of protobuf.\n * @param {function()} cls The constructor of the message type to deserialize\n * @param {bool=} binaryAsBase64 Deserialize bytes fields as base64 strings\n *     instead of Buffers. Defaults to false\n * @param {bool=} longsAsStrings Deserialize long values as strings instead of\n *     objects. Defaults to true\n * @return {function(Buffer):cls} The deserialization function\n */\nexports.deserializeCls = function deserializeCls(cls, options) {\n  var conversion_options = {\n    defaults: true,\n    bytes: options.binaryAsBase64 ? String : Buffer,\n    longs: options.longsAsStrings ? String : null,\n    enums: options.enumsAsStrings ? String : null,\n    oneofs: true\n  };\n  /**\n   * Deserialize a buffer to a message object\n   * @param {Buffer} arg_buf The buffer to deserialize\n   * @return {cls} The resulting object\n   */\n  return function deserialize(arg_buf) {\n    return cls.toObject(cls.decode(arg_buf), conversion_options);\n  };\n};\n\nvar deserializeCls = exports.deserializeCls;\n\n/**\n * Get a function that serializes objects to a buffer by protobuf class.\n * @param {function()} Cls The constructor of the message type to serialize\n * @return {function(Cls):Buffer} The serialization function\n */\nexports.serializeCls = function serializeCls(cls) {\n  /**\n   * Serialize an object to a Buffer\n   * @param {Object} arg The object to serialize\n   * @return {Buffer} The serialized object\n   */\n  return function serialize(arg) {\n    var message = cls.fromObject(arg);\n    return cls.encode(message).finish();\n  };\n};\n\nvar serializeCls = exports.serializeCls;\n\n/**\n * Get the fully qualified (dotted) name of a ProtoBuf.Reflect value.\n * @param {ProtoBuf.ReflectionObject} value The value to get the name of\n * @return {string} The fully qualified name of the value\n */\nexports.fullyQualifiedName = function fullyQualifiedName(value) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  var name = value.name;\n  var parent_fqn = fullyQualifiedName(value.parent);\n  if (parent_fqn !== '') {\n    name = parent_fqn + '.' + name;\n  }\n  return name;\n};\n\nvar fullyQualifiedName = exports.fullyQualifiedName;\n\n/**\n * Return a map from method names to method attributes for the service.\n * @param {ProtoBuf.Service} service The service to get attributes for\n * @param {Object=} options Options to apply to these attributes\n * @return {Object} The attributes map\n */\nexports.getProtobufServiceAttrs = function getProtobufServiceAttrs(service,\n                                                                   options) {\n  var prefix = '/' + fullyQualifiedName(service) + '/';\n  service.resolveAll();\n  return common.zipObject(service.methodsArray.map(function(method) {\n    return camelCase(method.name);\n  }), service.methodsArray.map(function(method) {\n    return {\n      originalName: method.name,\n      path: prefix + method.name,\n      requestStream: !!method.requestStream,\n      responseStream: !!method.responseStream,\n      requestType: method.resolvedRequestType,\n      responseType: method.resolvedResponseType,\n      requestSerialize: serializeCls(method.resolvedRequestType),\n      requestDeserialize: deserializeCls(method.resolvedRequestType, options),\n      responseSerialize: serializeCls(method.resolvedResponseType),\n      responseDeserialize: deserializeCls(method.resolvedResponseType, options)\n    };\n  }));\n};\n\nvar getProtobufServiceAttrs = exports.getProtobufServiceAttrs;\n\nexports.loadObject = function loadObject(value, options) {\n  var result = {};\n  if (!value) {\n    return value;\n  }\n  if (value.hasOwnProperty('methods')) {\n    // It's a service object\n    var service_attrs = getProtobufServiceAttrs(value, options);\n    return client.makeClientConstructor(service_attrs);\n  }\n\n  if (value.hasOwnProperty('nested')) {\n    // It's a namespace or root object\n    if (value.nested !== null && value.nested !== undefined) {\n      var values = Object.keys(value.nested).map(key => value.nested[key]);\n      values.forEach(nested => {\n        result[nested.name] = loadObject(nested, options);\n      });\n    }\n    return result;\n  }\n\n  // Otherwise, it's not something we need to change\n  return value;\n};\n\n/**\n * The primary purpose of this method is to distinguish between reflection\n * objects from different versions of ProtoBuf.js. This is just a heuristic,\n * checking for properties that are (currently) specific to this version of\n * ProtoBuf.js\n * @param {Object} obj The object to check\n * @return {boolean} Whether the object appears to be a Protobuf.js 6\n *   ReflectionObject\n */\nexports.isProbablyProtobufJs6 = function isProbablyProtobufJs6(obj) {\n  return (typeof obj.root === 'object') && (typeof obj.resolve === 'function');\n};\n"]},"metadata":{},"sourceType":"script"}