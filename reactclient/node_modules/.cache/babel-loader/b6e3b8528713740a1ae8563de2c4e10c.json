{"ast":null,"code":"/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\n\nvar grpc = require('./grpc_extension');\n\nvar common = require('./common');\n\nvar Metadata = require('./metadata');\n\nvar constants = require('./constants');\n\nvar stream = require('stream');\n\nvar Readable = stream.Readable;\nvar Writable = stream.Writable;\nvar Duplex = stream.Duplex;\n\nvar util = require('util');\n\nvar EventEmitter = require('events').EventEmitter;\n/**\n * Handle an error on a call by sending it as a status\n * @private\n * @param {grpc.internal~Call} call The call to send the error on\n * @param {(Object|Error)} error The error object\n */\n\n\nfunction handleError(call, error) {\n  var statusMetadata = new Metadata();\n  var status = {\n    code: constants.status.UNKNOWN,\n    details: 'Unknown Error'\n  };\n\n  if (error.hasOwnProperty('message')) {\n    status.details = error.message;\n  }\n\n  if (error.hasOwnProperty('code') && Number.isInteger(error.code)) {\n    status.code = error.code;\n\n    if (error.hasOwnProperty('details')) {\n      status.details = error.details;\n    }\n\n    if (status.code == constants.status.INTERNAL) {\n      common.log(constants.logVerbosity.ERROR, error);\n    }\n  }\n\n  if (error.hasOwnProperty('metadata')) {\n    statusMetadata = error.metadata;\n  }\n\n  status.metadata = statusMetadata._getCoreRepresentation();\n  var error_batch = {};\n\n  if (!call.metadataSent) {\n    error_batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n  }\n\n  error_batch[grpc.opType.SEND_STATUS_FROM_SERVER] = status;\n  call.startBatch(error_batch, function () {});\n}\n/**\n * Send a response to a unary or client streaming call.\n * @private\n * @param {grpc.Call} call The call to respond on\n * @param {*} value The value to respond with\n * @param {grpc~serialize} serialize Serialization function for the\n *     response\n * @param {grpc.Metadata=} metadata Optional trailing metadata to send with\n *     status\n * @param {number=} [flags=0] Flags for modifying how the message is sent.\n */\n\n\nfunction sendUnaryResponse(call, value, serialize, metadata, flags) {\n  var end_batch = {};\n  var statusMetadata = new Metadata();\n  var status = {\n    code: constants.status.OK,\n    details: 'OK'\n  };\n\n  if (metadata) {\n    statusMetadata = metadata;\n  }\n\n  var message;\n\n  try {\n    message = serialize(value);\n  } catch (e) {\n    e.code = constants.status.INTERNAL;\n    handleError(call, e);\n    return;\n  }\n\n  status.metadata = statusMetadata._getCoreRepresentation();\n\n  if (!call.metadataSent) {\n    end_batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n    call.metadataSent = true;\n  }\n\n  message.grpcWriteFlags = flags;\n  end_batch[grpc.opType.SEND_MESSAGE] = message;\n  end_batch[grpc.opType.SEND_STATUS_FROM_SERVER] = status;\n  call.startBatch(end_batch, function () {});\n}\n/**\n * Initialize a writable stream. This is used for both the writable and duplex\n * stream constructors.\n * @private\n * @param {Writable} stream The stream to set up\n * @param {function(*):Buffer=} Serialization function for responses\n */\n\n\nfunction setUpWritable(stream, serialize) {\n  stream.finished = false;\n  stream.status = {\n    code: constants.status.OK,\n    details: 'OK',\n    metadata: new Metadata()\n  };\n  stream.serialize = common.wrapIgnoreNull(serialize);\n\n  function sendStatus() {\n    var batch = {};\n\n    if (!stream.call.metadataSent) {\n      stream.call.metadataSent = true;\n      batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n    }\n\n    if (stream.status.metadata) {\n      stream.status.metadata = stream.status.metadata._getCoreRepresentation();\n    }\n\n    batch[grpc.opType.SEND_STATUS_FROM_SERVER] = stream.status;\n    stream.call.startBatch(batch, function () {});\n  }\n\n  stream.on('finish', sendStatus);\n  /**\n   * Set the pending status to a given error status. If the error does not have\n   * code or details properties, the code will be set to grpc.status.UNKNOWN\n   * and the details will be set to 'Unknown Error'.\n   * @param {Error} err The error object\n   */\n\n  function setStatus(err) {\n    var code = constants.status.UNKNOWN;\n    var details = 'Unknown Error';\n    var metadata = new Metadata();\n\n    if (err.hasOwnProperty('message')) {\n      details = err.message;\n    }\n\n    if (err.hasOwnProperty('code')) {\n      code = err.code;\n\n      if (err.hasOwnProperty('details')) {\n        details = err.details;\n      }\n    }\n\n    if (err.hasOwnProperty('metadata')) {\n      metadata = err.metadata;\n    }\n\n    stream.status = {\n      code: code,\n      details: details,\n      metadata: metadata\n    };\n  }\n  /**\n   * Terminate the call. This includes indicating that reads are done, draining\n   * all pending writes, and sending the given error as a status\n   * @param {Error} err The error object\n   * @this GrpcServerStream\n   */\n\n\n  function terminateCall(err) {\n    // Drain readable data\n    setStatus(err);\n    stream.end();\n  }\n\n  stream.on('error', terminateCall);\n  /**\n   * Override of Writable#end method that allows for sending metadata with a\n   * success status.\n   * @param {Metadata=} metadata Metadata to send with the status\n   */\n\n  stream.end = function (metadata) {\n    if (metadata) {\n      stream.status.metadata = metadata;\n    }\n\n    Writable.prototype.end.call(this);\n  };\n}\n/**\n * Initialize a readable stream. This is used for both the readable and duplex\n * stream constructors.\n * @private\n * @param {Readable} stream The stream to initialize\n * @param {grpc~deserialize} deserialize Deserialization function for\n *     incoming data.\n */\n\n\nfunction setUpReadable(stream, deserialize) {\n  stream.deserialize = common.wrapIgnoreNull(deserialize);\n  stream.finished = false;\n  stream.reading = false;\n\n  stream.terminate = function () {\n    stream.finished = true;\n    stream.on('data', function () {});\n  };\n\n  stream.on('cancelled', function () {\n    stream.terminate();\n  });\n}\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerUnaryCall~cancelled\n */\n\n\nutil.inherits(ServerUnaryCall, EventEmitter);\n/**\n * An EventEmitter. Used for unary calls.\n * @constructor grpc~ServerUnaryCall\n * @extends external:EventEmitter\n * @param {grpc.internal~Call} call The call object associated with the request\n * @param {grpc.Metadata} metadata The request metadata from the client\n */\n\nfunction ServerUnaryCall(call, metadata) {\n  EventEmitter.call(this);\n  this.call = call;\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerUnaryCall#cancelled\n   */\n\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerUnaryCall#metadata\n   */\n\n  this.metadata = metadata;\n  /**\n   * The request message from the client\n   * @member {*} grpc~ServerUnaryCall#request\n   */\n\n  this.request = undefined;\n}\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerWritableStream~cancelled\n */\n\n\nutil.inherits(ServerWritableStream, Writable);\n/**\n * A stream that the server can write to. Used for calls that are streaming from\n * the server side.\n * @constructor grpc~ServerWritableStream\n * @extends external:Writable\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerWritableStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerWritableStream#getPeer\n * @param {grpc.internal~Call} call The call object to send data with\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~serialize} serialize Serialization function for writes\n */\n\nfunction ServerWritableStream(call, metadata, serialize) {\n  Writable.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  this.finished = false;\n  setUpWritable(this, serialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerWritableStream#cancelled\n   */\n\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerWritableStream#metadata\n   */\n\n  this.metadata = metadata;\n  /**\n   * The request message from the client\n   * @member {*} grpc~ServerWritableStream#request\n   */\n\n  this.request = undefined;\n}\n/**\n * Start writing a chunk of data. This is an implementation of a method required\n * for implementing stream.Writable.\n * @private\n * @param {Buffer} chunk The chunk of data to write\n * @param {string} encoding Used to pass write flags\n * @param {function(Error=)} callback Callback to indicate that the write is\n *     complete\n */\n\n\nfunction _write(chunk, encoding, callback) {\n  /* jshint validthis: true */\n  var batch = {};\n  var self = this;\n  var message;\n\n  try {\n    message = this.serialize(chunk);\n  } catch (e) {\n    e.code = constants.status.INTERNAL;\n    callback(e);\n    return;\n  }\n\n  if (!this.call.metadataSent) {\n    batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n    this.call.metadataSent = true;\n  }\n\n  if (Number.isFinite(encoding)) {\n    /* Attach the encoding if it is a finite number. This is the closest we\n     * can get to checking that it is valid flags */\n    message.grpcWriteFlags = encoding;\n  }\n\n  batch[grpc.opType.SEND_MESSAGE] = message;\n  this.call.startBatch(batch, function (err, value) {\n    if (err) {\n      self.emit('error', err);\n      return;\n    }\n\n    callback();\n  });\n}\n\nServerWritableStream.prototype._write = _write;\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerReadableStream~cancelled\n */\n\nutil.inherits(ServerReadableStream, Readable);\n/**\n * A stream that the server can read from. Used for calls that are streaming\n * from the client side.\n * @constructor grpc~ServerReadableStream\n * @extends external:Readable\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerReadableStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerReadableStream#getPeer\n * @param {grpc.internal~Call} call The call object to read data with\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~deserialize} deserialize Deserialization function for reads\n */\n\nfunction ServerReadableStream(call, metadata, deserialize) {\n  Readable.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n\n  this.metadata = metadata;\n}\n/**\n * Start reading from the gRPC data source. This is an implementation of a\n * method required for implementing stream.Readable\n * @access private\n * @param {number} size Ignored\n */\n\n\nfunction _read(size) {\n  /* jshint validthis: true */\n  var self = this;\n  /**\n   * Callback to be called when a READ event is received. Pushes the data onto\n   * the read queue and starts reading again if applicable\n   * @param {grpc.Event} event READ event object\n   */\n\n  function readCallback(err, event) {\n    if (err) {\n      self.terminate();\n      return;\n    }\n\n    if (self.finished) {\n      self.push(null);\n      return;\n    }\n\n    var data = event.read;\n    var deserialized;\n\n    try {\n      deserialized = self.deserialize(data);\n    } catch (e) {\n      e.code = constants.status.INTERNAL;\n      self.emit('error', e);\n      return;\n    }\n\n    if (self.push(deserialized) && data !== null) {\n      var read_batch = {};\n      read_batch[grpc.opType.RECV_MESSAGE] = true;\n      self.call.startBatch(read_batch, readCallback);\n    } else {\n      self.reading = false;\n    }\n  }\n\n  if (self.finished) {\n    self.push(null);\n  } else {\n    if (!self.reading) {\n      self.reading = true;\n      var batch = {};\n      batch[grpc.opType.RECV_MESSAGE] = true;\n      self.call.startBatch(batch, readCallback);\n    }\n  }\n}\n\nServerReadableStream.prototype._read = _read;\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerDuplexStream~cancelled\n */\n\nutil.inherits(ServerDuplexStream, Duplex);\n/**\n * A stream that the server can read from or write to. Used for calls with\n * duplex streaming.\n * @constructor grpc~ServerDuplexStream\n * @extends external:Duplex\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerDuplexStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerDuplexStream#getPeer\n * @param {grpc.internal~Call} call Call object to proxy\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~serialize} serialize Serialization function for requests\n * @param {grpc~deserialize} deserialize Deserialization function for\n *     responses\n */\n\nfunction ServerDuplexStream(call, metadata, serialize, deserialize) {\n  Duplex.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  setUpWritable(this, serialize);\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n\n  this.metadata = metadata;\n}\n\nServerDuplexStream.prototype._read = _read;\nServerDuplexStream.prototype._write = _write;\n/**\n * Send the initial metadata for a writable stream.\n * @alias grpc~ServerUnaryCall#sendMetadata\n * @param {grpc.Metadata} responseMetadata Metadata to send\n */\n\nfunction sendMetadata(responseMetadata) {\n  /* jshint validthis: true */\n  var self = this;\n\n  if (!this.call.metadataSent) {\n    this.call.metadataSent = true;\n    var batch = {};\n    batch[grpc.opType.SEND_INITIAL_METADATA] = responseMetadata._getCoreRepresentation();\n    this.call.startBatch(batch, function (err) {\n      if (err) {\n        self.emit('error', err);\n        return;\n      }\n    });\n  }\n}\n\nServerUnaryCall.prototype.sendMetadata = sendMetadata;\nServerWritableStream.prototype.sendMetadata = sendMetadata;\nServerReadableStream.prototype.sendMetadata = sendMetadata;\nServerDuplexStream.prototype.sendMetadata = sendMetadata;\n/**\n * Get the endpoint this call/stream is connected to.\n * @alias grpc~ServerUnaryCall#getPeer\n * @return {string} The URI of the endpoint\n */\n\nfunction getPeer() {\n  /* jshint validthis: true */\n  return this.call.getPeer();\n}\n\nServerUnaryCall.prototype.getPeer = getPeer;\nServerReadableStream.prototype.getPeer = getPeer;\nServerWritableStream.prototype.getPeer = getPeer;\nServerDuplexStream.prototype.getPeer = getPeer;\n/**\n * Wait for the client to close, then emit a cancelled event if the client\n * cancelled.\n * @private\n */\n\nfunction waitForCancel() {\n  /* jshint validthis: true */\n  var self = this;\n  var cancel_batch = {};\n  cancel_batch[grpc.opType.RECV_CLOSE_ON_SERVER] = true;\n  self.call.startBatch(cancel_batch, function (err, result) {\n    if (err) {\n      self.emit('error', err);\n    }\n\n    if (result.cancelled) {\n      self.cancelled = true;\n      self.emit('cancelled');\n    }\n  });\n}\n\nServerUnaryCall.prototype.waitForCancel = waitForCancel;\nServerReadableStream.prototype.waitForCancel = waitForCancel;\nServerWritableStream.prototype.waitForCancel = waitForCancel;\nServerDuplexStream.prototype.waitForCancel = waitForCancel;\n/**\n * Callback function passed to server handlers that handle methods with unary\n * responses.\n * @callback grpc.Server~sendUnaryData\n * @param {grpc~ServiceError} error An error, if the call failed\n * @param {*} value The response value. Must be a valid argument to the\n *     `responseSerialize` method of the method that is being handled\n * @param {grpc.Metadata=} trailer Trailing metadata to send, if applicable\n * @param {grpc.writeFlags=} flags Flags to modify writing the response\n */\n\n/**\n * User-provided method to handle unary requests on a server\n * @callback grpc.Server~handleUnaryCall\n * @param {grpc~ServerUnaryCall} call The call object\n * @param {grpc.Server~sendUnaryData} callback The callback to call to respond\n *     to the request\n */\n\n/**\n * Fully handle a unary call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleUnaryCall} handler.func The handler function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\n\nfunction handleUnary(call, handler, metadata) {\n  var emitter = new ServerUnaryCall(call, metadata);\n  emitter.on('error', function (error) {\n    handleError(call, error);\n  });\n  emitter.waitForCancel();\n  var batch = {};\n  batch[grpc.opType.RECV_MESSAGE] = true;\n  call.startBatch(batch, function (err, result) {\n    if (err) {\n      handleError(call, err);\n      return;\n    }\n\n    try {\n      emitter.request = handler.deserialize(result.read);\n    } catch (e) {\n      e.code = constants.status.INTERNAL;\n      handleError(call, e);\n      return;\n    }\n\n    if (emitter.cancelled) {\n      return;\n    }\n\n    handler.func(emitter, function sendUnaryData(err, value, trailer, flags) {\n      if (err) {\n        if (trailer) {\n          err.metadata = trailer;\n        }\n\n        handleError(call, err);\n      } else {\n        sendUnaryResponse(call, value, handler.serialize, trailer, flags);\n      }\n    });\n  });\n}\n/**\n * User provided method to handle server streaming methods on the server.\n * @callback grpc.Server~handleServerStreamingCall\n * @param {grpc~ServerWritableStream} call The call object\n */\n\n/**\n * Fully handle a server streaming call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleServerStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\n\n\nfunction handleServerStreaming(call, handler, metadata) {\n  var stream = new ServerWritableStream(call, metadata, handler.serialize);\n  stream.waitForCancel();\n  var batch = {};\n  batch[grpc.opType.RECV_MESSAGE] = true;\n  call.startBatch(batch, function (err, result) {\n    if (err) {\n      stream.emit('error', err);\n      return;\n    }\n\n    try {\n      stream.request = handler.deserialize(result.read);\n    } catch (e) {\n      e.code = constants.status.INTERNAL;\n      stream.emit('error', e);\n      return;\n    }\n\n    handler.func(stream);\n  });\n}\n/**\n * User provided method to handle client streaming methods on the server.\n * @callback grpc.Server~handleClientStreamingCall\n * @param {grpc~ServerReadableStream} call The call object\n * @param {grpc.Server~sendUnaryData} callback The callback to call to respond\n *     to the request\n */\n\n/**\n * Fully handle a client streaming call\n * @access private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleClientStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\n\n\nfunction handleClientStreaming(call, handler, metadata) {\n  var stream = new ServerReadableStream(call, metadata, handler.deserialize);\n  stream.on('error', function (error) {\n    handleError(call, error);\n  });\n  stream.waitForCancel();\n  handler.func(stream, function (err, value, trailer, flags) {\n    stream.terminate();\n\n    if (err) {\n      if (trailer) {\n        err.metadata = trailer;\n      }\n\n      handleError(call, err);\n    } else {\n      sendUnaryResponse(call, value, handler.serialize, trailer, flags);\n    }\n  });\n}\n/**\n * User provided method to handle bidirectional streaming calls on the server.\n * @callback grpc.Server~handleBidiStreamingCall\n * @param {grpc~ServerDuplexStream} call The call object\n */\n\n/**\n * Fully handle a bidirectional streaming call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleBidiStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {Metadata} metadata Metadata from the client\n */\n\n\nfunction handleBidiStreaming(call, handler, metadata) {\n  var stream = new ServerDuplexStream(call, metadata, handler.serialize, handler.deserialize);\n  stream.waitForCancel();\n  handler.func(stream);\n}\n\nvar streamHandlers = {\n  unary: handleUnary,\n  server_stream: handleServerStreaming,\n  client_stream: handleClientStreaming,\n  bidi: handleBidiStreaming\n};\n/**\n * Constructs a server object that stores request handlers and delegates\n * incoming requests to those handlers\n * @memberof grpc\n * @constructor\n * @param {Object=} options Options that should be passed to the internal server\n *     implementation. The available options are listed in\n *     [this document]{@link https://grpc.github.io/grpc/core/group__grpc__arg__keys.html}.\n * @example\n * var server = new grpc.Server();\n * server.addProtoService(protobuf_service_descriptor, service_implementation);\n * server.bind('address:port', server_credential);\n * server.start();\n */\n\nfunction Server(options) {\n  this.handlers = {};\n  var server = new grpc.Server(options);\n  this._server = server;\n  this.started = false;\n}\n/**\n * Start the server and begin handling requests\n */\n\n\nServer.prototype.start = function () {\n  if (this.started) {\n    throw new Error('Server is already running');\n  }\n\n  var self = this;\n  this.started = true;\n\n  this._server.start();\n  /**\n   * Handles the SERVER_RPC_NEW event. If there is a handler associated with\n   * the requested method, use that handler to respond to the request. Then\n   * wait for the next request\n   * @param {grpc.internal~Event} event The event to handle with tag\n   *     SERVER_RPC_NEW\n   */\n\n\n  function handleNewCall(err, event) {\n    if (err) {\n      return;\n    }\n\n    var details = event.new_call;\n    var call = details.call;\n    var method = details.method;\n\n    var metadata = Metadata._fromCoreRepresentation(details.metadata);\n\n    if (method === null) {\n      return;\n    }\n\n    self._server.requestCall(handleNewCall);\n\n    var handler;\n\n    if (self.handlers.hasOwnProperty(method)) {\n      handler = self.handlers[method];\n    } else {\n      var batch = {};\n      batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n      batch[grpc.opType.SEND_STATUS_FROM_SERVER] = {\n        code: constants.status.UNIMPLEMENTED,\n        details: 'RPC method not implemented ' + method,\n        metadata: new Metadata()._getCoreRepresentation()\n      };\n      batch[grpc.opType.RECV_CLOSE_ON_SERVER] = true;\n      call.startBatch(batch, function () {});\n      return;\n    }\n\n    streamHandlers[handler.type](call, handler, metadata);\n  }\n\n  this._server.requestCall(handleNewCall);\n};\n/**\n * Unified type for application handlers for all types of calls\n * @typedef {(grpc.Server~handleUnaryCall\n *            |grpc.Server~handleClientStreamingCall\n *            |grpc.Server~handleServerStreamingCall\n *            |grpc.Server~handleBidiStreamingCall)} grpc.Server~handleCall\n */\n\n/**\n * Registers a handler to handle the named method. Fails if there already is\n * a handler for the given method. Returns true on success\n * @param {string} name The name of the method that the provided function should\n *     handle/respond to.\n * @param {grpc.Server~handleCall} handler Function that takes a stream of\n *     request values and returns a stream of response values\n * @param {grpc~serialize} serialize Serialization function for responses\n * @param {grpc~deserialize} deserialize Deserialization function for requests\n * @param {('unary'|'client_stream'|'server_stream'|'bidi')} type The streaming type of method that this handles\n * @return {boolean} True if the handler was set. False if a handler was already\n *     set for that name.\n */\n\n\nServer.prototype.register = function (name, handler, serialize, deserialize, type) {\n  if (this.handlers.hasOwnProperty(name)) {\n    return false;\n  }\n\n  this.handlers[name] = {\n    func: handler,\n    serialize: serialize,\n    deserialize: deserialize,\n    type: type\n  };\n  return true;\n};\n/**\n * Gracefully shuts down the server. The server will stop receiving new calls,\n * and any pending calls will complete. The callback will be called when all\n * pending calls have completed and the server is fully shut down. This method\n * is idempotent with itself and forceShutdown.\n * @param {function()} callback The shutdown complete callback\n */\n\n\nServer.prototype.tryShutdown = function (callback) {\n  this._server.tryShutdown(callback);\n};\n/**\n * Forcibly shuts down the server. The server will stop receiving new calls\n * and cancel all pending calls. When it returns, the server has shut down.\n * This method is idempotent with itself and tryShutdown, and it will trigger\n * any outstanding tryShutdown callbacks.\n */\n\n\nServer.prototype.forceShutdown = function () {\n  this._server.forceShutdown();\n};\n\nvar unimplementedStatusResponse = {\n  code: constants.status.UNIMPLEMENTED,\n  details: 'The server does not implement this method'\n};\nvar defaultHandler = {\n  unary: function (call, callback) {\n    callback(unimplementedStatusResponse);\n  },\n  client_stream: function (call, callback) {\n    callback(unimplementedStatusResponse);\n  },\n  server_stream: function (call) {\n    call.emit('error', unimplementedStatusResponse);\n  },\n  bidi: function (call) {\n    call.emit('error', unimplementedStatusResponse);\n  }\n};\n\nfunction isObject(thing) {\n  return (typeof thing === 'object' || typeof thing === 'function') && thing !== null;\n}\n/**\n * Add a service to the server, with a corresponding implementation.\n * @param {grpc~ServiceDefinition} service The service descriptor\n * @param {Object<String, grpc.Server~handleCall>} implementation Map of method\n *     names to method implementation for the provided service.\n */\n\n\nServer.prototype.addService = function (service, implementation) {\n  if (!isObject(service) || !isObject(implementation)) {\n    throw new Error('addService requires two objects as arguments');\n  }\n\n  if (Object.keys(service).length === 0) {\n    throw new Error('Cannot add an empty service to a server');\n  }\n\n  if (this.started) {\n    throw new Error('Can\\'t add a service to a started server.');\n  }\n\n  var self = this;\n  Object.keys(service).forEach(name => {\n    const attrs = service[name];\n    var method_type;\n\n    if (attrs.requestStream) {\n      if (attrs.responseStream) {\n        method_type = 'bidi';\n      } else {\n        method_type = 'client_stream';\n      }\n    } else {\n      if (attrs.responseStream) {\n        method_type = 'server_stream';\n      } else {\n        method_type = 'unary';\n      }\n    }\n\n    var impl;\n\n    if (implementation[name] === undefined) {\n      /* Handle the case where the method is passed with the name exactly as\n         written in the proto file, instead of using JavaScript function\n         naming style */\n      if (implementation[attrs.originalName] === undefined) {\n        common.log(constants.logVerbosity.ERROR, 'Method handler ' + name + ' for ' + attrs.path + ' expected but not provided');\n        impl = defaultHandler[method_type];\n      } else {\n        impl = implementation[attrs.originalName].bind(implementation);\n      }\n    } else {\n      impl = implementation[name].bind(implementation);\n    }\n\n    var serialize = attrs.responseSerialize;\n    var deserialize = attrs.requestDeserialize;\n    var register_success = self.register(attrs.path, impl, serialize, deserialize, method_type);\n\n    if (!register_success) {\n      throw new Error('Method handler for ' + attrs.path + ' already provided.');\n    }\n  });\n};\n/**\n * Add a proto service to the server, with a corresponding implementation\n * @deprecated Use {@link grpc.Server#addService} instead\n * @param {Protobuf.Reflect.Service} service The proto service descriptor\n * @param {Object<String, grpc.Server~handleCall>} implementation Map of method\n *     names to method implementation for the provided service.\n */\n\n\nServer.prototype.addProtoService = util.deprecate(function (service, implementation) {\n  var options;\n\n  var protobuf_js_5_common = require('./protobuf_js_5_common');\n\n  var protobuf_js_6_common = require('./protobuf_js_6_common');\n\n  if (protobuf_js_5_common.isProbablyProtobufJs5(service)) {\n    options = Object.assign({}, common.defaultGrpcOptions, service.grpc_options);\n    this.addService(protobuf_js_5_common.getProtobufServiceAttrs(service, options), implementation);\n  } else if (protobuf_js_6_common.isProbablyProtobufJs6(service)) {\n    options = Object.assign({}, common.defaultGrpcOptions, service.grpc_options);\n    this.addService(protobuf_js_6_common.getProtobufServiceAttrs(service, options), implementation);\n  } else {\n    // We assume that this is a service attributes object\n    this.addService(service, implementation);\n  }\n}, 'Server#addProtoService: Use Server#addService instead');\n/**\n * Binds the server to the given port, with SSL disabled if creds is an\n * insecure credentials object\n * @param {string} port The port that the server should bind on, in the format\n *     \"address:port\"\n * @param {grpc.ServerCredentials} creds Server credential object to be used for\n *     SSL. Pass an insecure credentials object for an insecure port.\n * @return {number} The bound port number. Negative if binding the port failed.\n */\n\nServer.prototype.bind = function (port, creds) {\n  if (this.started) {\n    throw new Error('Can\\'t bind an already running server to an address');\n  }\n\n  return this._server.addHttp2Port(port, creds);\n};\n/**\n * Called with the result of attempting to bind a port\n * @callback grpc.Server~bindCallback\n * @param {Error=} error If non-null, indicates that binding the port failed.\n * @param {number} port The bound port number. If binding the port fails, this\n *     will be negative to match the output of bind.\n */\n\n/**\n * Binds the server to the given port, with SSL disabled if creds is an\n * insecure credentials object. Provides the result asynchronously.\n * @param {string} port The port that the server should bind on, in the format\n *     \"address:port\"\n * @param {grpc.ServerCredentials} creds Server credential object to be used for\n *     SSL. Pass an insecure credentials object for an insecure port.\n */\n\n\nServer.prototype.bindAsync = function (port, creds, callback) {\n  /* This can throw. We do not try to catch that error because it indicates an\n   * incorrect use of the function, which should not be surfaced asynchronously\n   */\n  const result = this.bind(port, creds);\n\n  if (result < 0) {\n    setImmediate(callback, new Error('Failed to bind port'), result);\n  } else {\n    setImmediate(callback, null, result);\n  }\n};\n\nexports.Server = Server;","map":{"version":3,"sources":["/home/hvn15/SchoolProjects/SystemIntegrationExam/reactclient/node_modules/grpc/src/server.js"],"names":["grpc","require","common","Metadata","constants","stream","Readable","Writable","Duplex","util","EventEmitter","handleError","call","error","statusMetadata","status","code","UNKNOWN","details","hasOwnProperty","message","Number","isInteger","INTERNAL","log","logVerbosity","ERROR","metadata","_getCoreRepresentation","error_batch","metadataSent","opType","SEND_INITIAL_METADATA","SEND_STATUS_FROM_SERVER","startBatch","sendUnaryResponse","value","serialize","flags","end_batch","OK","e","grpcWriteFlags","SEND_MESSAGE","setUpWritable","finished","wrapIgnoreNull","sendStatus","batch","on","setStatus","err","terminateCall","end","prototype","setUpReadable","deserialize","reading","terminate","inherits","ServerUnaryCall","cancelled","request","undefined","ServerWritableStream","objectMode","_write","chunk","encoding","callback","self","isFinite","emit","ServerReadableStream","_read","size","readCallback","event","push","data","read","deserialized","read_batch","RECV_MESSAGE","ServerDuplexStream","sendMetadata","responseMetadata","getPeer","waitForCancel","cancel_batch","RECV_CLOSE_ON_SERVER","result","handleUnary","handler","emitter","func","sendUnaryData","trailer","handleServerStreaming","handleClientStreaming","handleBidiStreaming","streamHandlers","unary","server_stream","client_stream","bidi","Server","options","handlers","server","_server","started","start","Error","handleNewCall","new_call","method","_fromCoreRepresentation","requestCall","UNIMPLEMENTED","type","register","name","tryShutdown","forceShutdown","unimplementedStatusResponse","defaultHandler","isObject","thing","addService","service","implementation","Object","keys","length","forEach","attrs","method_type","requestStream","responseStream","impl","originalName","path","bind","responseSerialize","requestDeserialize","register_success","addProtoService","deprecate","protobuf_js_5_common","protobuf_js_6_common","isProbablyProtobufJs5","assign","defaultGrpcOptions","grpc_options","getProtobufServiceAttrs","isProbablyProtobufJs6","port","creds","addHttp2Port","bindAsync","setImmediate","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n'use strict';\n\nvar grpc = require('./grpc_extension');\n\nvar common = require('./common');\n\nvar Metadata = require('./metadata');\n\nvar constants = require('./constants');\n\nvar stream = require('stream');\n\nvar Readable = stream.Readable;\nvar Writable = stream.Writable;\nvar Duplex = stream.Duplex;\nvar util = require('util');\n\nvar EventEmitter = require('events').EventEmitter;\n\n/**\n * Handle an error on a call by sending it as a status\n * @private\n * @param {grpc.internal~Call} call The call to send the error on\n * @param {(Object|Error)} error The error object\n */\nfunction handleError(call, error) {\n  var statusMetadata = new Metadata();\n  var status = {\n    code: constants.status.UNKNOWN,\n    details: 'Unknown Error'\n  };\n  if (error.hasOwnProperty('message')) {\n    status.details = error.message;\n  }\n  if (error.hasOwnProperty('code') && Number.isInteger(error.code)) {\n    status.code = error.code;\n    if (error.hasOwnProperty('details')) {\n      status.details = error.details;\n    }\n    if (status.code == constants.status.INTERNAL) {\n      common.log(constants.logVerbosity.ERROR, error);\n    }\n  }\n  if (error.hasOwnProperty('metadata')) {\n    statusMetadata = error.metadata;\n  }\n  status.metadata = statusMetadata._getCoreRepresentation();\n  var error_batch = {};\n  if (!call.metadataSent) {\n    error_batch[grpc.opType.SEND_INITIAL_METADATA] =\n        (new Metadata())._getCoreRepresentation();\n  }\n  error_batch[grpc.opType.SEND_STATUS_FROM_SERVER] = status;\n  call.startBatch(error_batch, function(){});\n}\n\n/**\n * Send a response to a unary or client streaming call.\n * @private\n * @param {grpc.Call} call The call to respond on\n * @param {*} value The value to respond with\n * @param {grpc~serialize} serialize Serialization function for the\n *     response\n * @param {grpc.Metadata=} metadata Optional trailing metadata to send with\n *     status\n * @param {number=} [flags=0] Flags for modifying how the message is sent.\n */\nfunction sendUnaryResponse(call, value, serialize, metadata, flags) {\n  var end_batch = {};\n  var statusMetadata = new Metadata();\n  var status = {\n    code: constants.status.OK,\n    details: 'OK'\n  };\n  if (metadata) {\n    statusMetadata = metadata;\n  }\n  var message;\n  try {\n    message = serialize(value);\n  } catch (e) {\n    e.code = constants.status.INTERNAL;\n    handleError(call, e);\n    return;\n  }\n  status.metadata = statusMetadata._getCoreRepresentation();\n  if (!call.metadataSent) {\n    end_batch[grpc.opType.SEND_INITIAL_METADATA] =\n        (new Metadata())._getCoreRepresentation();\n    call.metadataSent = true;\n  }\n  message.grpcWriteFlags = flags;\n  end_batch[grpc.opType.SEND_MESSAGE] = message;\n  end_batch[grpc.opType.SEND_STATUS_FROM_SERVER] = status;\n  call.startBatch(end_batch, function (){});\n}\n\n/**\n * Initialize a writable stream. This is used for both the writable and duplex\n * stream constructors.\n * @private\n * @param {Writable} stream The stream to set up\n * @param {function(*):Buffer=} Serialization function for responses\n */\nfunction setUpWritable(stream, serialize) {\n  stream.finished = false;\n  stream.status = {\n    code : constants.status.OK,\n    details : 'OK',\n    metadata : new Metadata()\n  };\n  stream.serialize = common.wrapIgnoreNull(serialize);\n  function sendStatus() {\n    var batch = {};\n    if (!stream.call.metadataSent) {\n      stream.call.metadataSent = true;\n      batch[grpc.opType.SEND_INITIAL_METADATA] =\n          (new Metadata())._getCoreRepresentation();\n    }\n\n    if (stream.status.metadata) {\n      stream.status.metadata = stream.status.metadata._getCoreRepresentation();\n    }\n    batch[grpc.opType.SEND_STATUS_FROM_SERVER] = stream.status;\n    stream.call.startBatch(batch, function(){});\n  }\n  stream.on('finish', sendStatus);\n  /**\n   * Set the pending status to a given error status. If the error does not have\n   * code or details properties, the code will be set to grpc.status.UNKNOWN\n   * and the details will be set to 'Unknown Error'.\n   * @param {Error} err The error object\n   */\n  function setStatus(err) {\n    var code = constants.status.UNKNOWN;\n    var details = 'Unknown Error';\n    var metadata = new Metadata();\n    if (err.hasOwnProperty('message')) {\n      details = err.message;\n    }\n    if (err.hasOwnProperty('code')) {\n      code = err.code;\n      if (err.hasOwnProperty('details')) {\n        details = err.details;\n      }\n    }\n    if (err.hasOwnProperty('metadata')) {\n      metadata = err.metadata;\n    }\n    stream.status = {code: code, details: details, metadata: metadata};\n  }\n  /**\n   * Terminate the call. This includes indicating that reads are done, draining\n   * all pending writes, and sending the given error as a status\n   * @param {Error} err The error object\n   * @this GrpcServerStream\n   */\n  function terminateCall(err) {\n    // Drain readable data\n    setStatus(err);\n    stream.end();\n  }\n  stream.on('error', terminateCall);\n  /**\n   * Override of Writable#end method that allows for sending metadata with a\n   * success status.\n   * @param {Metadata=} metadata Metadata to send with the status\n   */\n  stream.end = function(metadata) {\n    if (metadata) {\n      stream.status.metadata = metadata;\n    }\n    Writable.prototype.end.call(this);\n  };\n}\n\n/**\n * Initialize a readable stream. This is used for both the readable and duplex\n * stream constructors.\n * @private\n * @param {Readable} stream The stream to initialize\n * @param {grpc~deserialize} deserialize Deserialization function for\n *     incoming data.\n */\nfunction setUpReadable(stream, deserialize) {\n  stream.deserialize = common.wrapIgnoreNull(deserialize);\n  stream.finished = false;\n  stream.reading = false;\n\n  stream.terminate = function() {\n    stream.finished = true;\n    stream.on('data', function() {});\n  };\n\n  stream.on('cancelled', function() {\n    stream.terminate();\n  });\n}\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerUnaryCall~cancelled\n */\n\nutil.inherits(ServerUnaryCall, EventEmitter);\n\n/**\n * An EventEmitter. Used for unary calls.\n * @constructor grpc~ServerUnaryCall\n * @extends external:EventEmitter\n * @param {grpc.internal~Call} call The call object associated with the request\n * @param {grpc.Metadata} metadata The request metadata from the client\n */\nfunction ServerUnaryCall(call, metadata) {\n  EventEmitter.call(this);\n  this.call = call;\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerUnaryCall#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerUnaryCall#metadata\n   */\n  this.metadata = metadata;\n  /**\n   * The request message from the client\n   * @member {*} grpc~ServerUnaryCall#request\n   */\n  this.request = undefined;\n}\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerWritableStream~cancelled\n */\n\nutil.inherits(ServerWritableStream, Writable);\n\n/**\n * A stream that the server can write to. Used for calls that are streaming from\n * the server side.\n * @constructor grpc~ServerWritableStream\n * @extends external:Writable\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerWritableStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerWritableStream#getPeer\n * @param {grpc.internal~Call} call The call object to send data with\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~serialize} serialize Serialization function for writes\n */\nfunction ServerWritableStream(call, metadata, serialize) {\n  Writable.call(this, {objectMode: true});\n  this.call = call;\n\n  this.finished = false;\n  setUpWritable(this, serialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerWritableStream#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerWritableStream#metadata\n   */\n  this.metadata = metadata;\n  /**\n   * The request message from the client\n   * @member {*} grpc~ServerWritableStream#request\n   */\n  this.request = undefined;\n}\n\n/**\n * Start writing a chunk of data. This is an implementation of a method required\n * for implementing stream.Writable.\n * @private\n * @param {Buffer} chunk The chunk of data to write\n * @param {string} encoding Used to pass write flags\n * @param {function(Error=)} callback Callback to indicate that the write is\n *     complete\n */\nfunction _write(chunk, encoding, callback) {\n  /* jshint validthis: true */\n  var batch = {};\n  var self = this;\n  var message;\n  try {\n    message = this.serialize(chunk);\n  } catch (e) {\n    e.code = constants.status.INTERNAL;\n    callback(e);\n    return;\n  }\n  if (!this.call.metadataSent) {\n    batch[grpc.opType.SEND_INITIAL_METADATA] =\n        (new Metadata())._getCoreRepresentation();\n    this.call.metadataSent = true;\n  }\n  if (Number.isFinite(encoding)) {\n    /* Attach the encoding if it is a finite number. This is the closest we\n     * can get to checking that it is valid flags */\n    message.grpcWriteFlags = encoding;\n  }\n  batch[grpc.opType.SEND_MESSAGE] = message;\n  this.call.startBatch(batch, function(err, value) {\n    if (err) {\n      self.emit('error', err);\n      return;\n    }\n    callback();\n  });\n}\n\nServerWritableStream.prototype._write = _write;\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerReadableStream~cancelled\n */\n\nutil.inherits(ServerReadableStream, Readable);\n\n/**\n * A stream that the server can read from. Used for calls that are streaming\n * from the client side.\n * @constructor grpc~ServerReadableStream\n * @extends external:Readable\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerReadableStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerReadableStream#getPeer\n * @param {grpc.internal~Call} call The call object to read data with\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~deserialize} deserialize Deserialization function for reads\n */\nfunction ServerReadableStream(call, metadata, deserialize) {\n  Readable.call(this, {objectMode: true});\n  this.call = call;\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n  this.metadata = metadata;\n}\n\n/**\n * Start reading from the gRPC data source. This is an implementation of a\n * method required for implementing stream.Readable\n * @access private\n * @param {number} size Ignored\n */\nfunction _read(size) {\n  /* jshint validthis: true */\n  var self = this;\n  /**\n   * Callback to be called when a READ event is received. Pushes the data onto\n   * the read queue and starts reading again if applicable\n   * @param {grpc.Event} event READ event object\n   */\n  function readCallback(err, event) {\n    if (err) {\n      self.terminate();\n      return;\n    }\n    if (self.finished) {\n      self.push(null);\n      return;\n    }\n    var data = event.read;\n    var deserialized;\n    try {\n      deserialized = self.deserialize(data);\n    } catch (e) {\n      e.code = constants.status.INTERNAL;\n      self.emit('error', e);\n      return;\n    }\n    if (self.push(deserialized) && data !== null) {\n      var read_batch = {};\n      read_batch[grpc.opType.RECV_MESSAGE] = true;\n      self.call.startBatch(read_batch, readCallback);\n    } else {\n      self.reading = false;\n    }\n  }\n  if (self.finished) {\n    self.push(null);\n  } else {\n    if (!self.reading) {\n      self.reading = true;\n      var batch = {};\n      batch[grpc.opType.RECV_MESSAGE] = true;\n      self.call.startBatch(batch, readCallback);\n    }\n  }\n}\n\nServerReadableStream.prototype._read = _read;\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerDuplexStream~cancelled\n */\n\nutil.inherits(ServerDuplexStream, Duplex);\n\n/**\n * A stream that the server can read from or write to. Used for calls with\n * duplex streaming.\n * @constructor grpc~ServerDuplexStream\n * @extends external:Duplex\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerDuplexStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerDuplexStream#getPeer\n * @param {grpc.internal~Call} call Call object to proxy\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~serialize} serialize Serialization function for requests\n * @param {grpc~deserialize} deserialize Deserialization function for\n *     responses\n */\nfunction ServerDuplexStream(call, metadata, serialize, deserialize) {\n  Duplex.call(this, {objectMode: true});\n  this.call = call;\n  setUpWritable(this, serialize);\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n  this.metadata = metadata;\n}\n\nServerDuplexStream.prototype._read = _read;\nServerDuplexStream.prototype._write = _write;\n\n/**\n * Send the initial metadata for a writable stream.\n * @alias grpc~ServerUnaryCall#sendMetadata\n * @param {grpc.Metadata} responseMetadata Metadata to send\n */\nfunction sendMetadata(responseMetadata) {\n  /* jshint validthis: true */\n  var self = this;\n  if (!this.call.metadataSent) {\n    this.call.metadataSent = true;\n    var batch = {};\n    batch[grpc.opType.SEND_INITIAL_METADATA] =\n        responseMetadata._getCoreRepresentation();\n    this.call.startBatch(batch, function(err) {\n      if (err) {\n        self.emit('error', err);\n        return;\n      }\n    });\n  }\n}\n\nServerUnaryCall.prototype.sendMetadata = sendMetadata;\nServerWritableStream.prototype.sendMetadata = sendMetadata;\nServerReadableStream.prototype.sendMetadata = sendMetadata;\nServerDuplexStream.prototype.sendMetadata = sendMetadata;\n\n/**\n * Get the endpoint this call/stream is connected to.\n * @alias grpc~ServerUnaryCall#getPeer\n * @return {string} The URI of the endpoint\n */\nfunction getPeer() {\n  /* jshint validthis: true */\n  return this.call.getPeer();\n}\n\nServerUnaryCall.prototype.getPeer = getPeer;\nServerReadableStream.prototype.getPeer = getPeer;\nServerWritableStream.prototype.getPeer = getPeer;\nServerDuplexStream.prototype.getPeer = getPeer;\n\n/**\n * Wait for the client to close, then emit a cancelled event if the client\n * cancelled.\n * @private\n */\nfunction waitForCancel() {\n  /* jshint validthis: true */\n  var self = this;\n  var cancel_batch = {};\n  cancel_batch[grpc.opType.RECV_CLOSE_ON_SERVER] = true;\n  self.call.startBatch(cancel_batch, function(err, result) {\n    if (err) {\n      self.emit('error', err);\n    }\n    if (result.cancelled) {\n      self.cancelled = true;\n      self.emit('cancelled');\n    }\n  });\n}\n\nServerUnaryCall.prototype.waitForCancel = waitForCancel;\nServerReadableStream.prototype.waitForCancel = waitForCancel;\nServerWritableStream.prototype.waitForCancel = waitForCancel;\nServerDuplexStream.prototype.waitForCancel = waitForCancel;\n\n/**\n * Callback function passed to server handlers that handle methods with unary\n * responses.\n * @callback grpc.Server~sendUnaryData\n * @param {grpc~ServiceError} error An error, if the call failed\n * @param {*} value The response value. Must be a valid argument to the\n *     `responseSerialize` method of the method that is being handled\n * @param {grpc.Metadata=} trailer Trailing metadata to send, if applicable\n * @param {grpc.writeFlags=} flags Flags to modify writing the response\n */\n\n/**\n * User-provided method to handle unary requests on a server\n * @callback grpc.Server~handleUnaryCall\n * @param {grpc~ServerUnaryCall} call The call object\n * @param {grpc.Server~sendUnaryData} callback The callback to call to respond\n *     to the request\n */\n\n/**\n * Fully handle a unary call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleUnaryCall} handler.func The handler function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\nfunction handleUnary(call, handler, metadata) {\n  var emitter = new ServerUnaryCall(call, metadata);\n  emitter.on('error', function(error) {\n    handleError(call, error);\n  });\n  emitter.waitForCancel();\n  var batch = {};\n  batch[grpc.opType.RECV_MESSAGE] = true;\n  call.startBatch(batch, function(err, result) {\n    if (err) {\n      handleError(call, err);\n      return;\n    }\n    try {\n      emitter.request = handler.deserialize(result.read);\n    } catch (e) {\n      e.code = constants.status.INTERNAL;\n      handleError(call, e);\n      return;\n    }\n    if (emitter.cancelled) {\n      return;\n    }\n    handler.func(emitter, function sendUnaryData(err, value, trailer, flags) {\n      if (err) {\n        if (trailer) {\n          err.metadata = trailer;\n        }\n        handleError(call, err);\n      } else {\n        sendUnaryResponse(call, value, handler.serialize, trailer, flags);\n      }\n    });\n  });\n}\n\n/**\n * User provided method to handle server streaming methods on the server.\n * @callback grpc.Server~handleServerStreamingCall\n * @param {grpc~ServerWritableStream} call The call object\n */\n\n/**\n * Fully handle a server streaming call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleServerStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\nfunction handleServerStreaming(call, handler, metadata) {\n  var stream = new ServerWritableStream(call, metadata, handler.serialize);\n  stream.waitForCancel();\n  var batch = {};\n  batch[grpc.opType.RECV_MESSAGE] = true;\n  call.startBatch(batch, function(err, result) {\n    if (err) {\n      stream.emit('error', err);\n      return;\n    }\n    try {\n      stream.request = handler.deserialize(result.read);\n    } catch (e) {\n      e.code = constants.status.INTERNAL;\n      stream.emit('error', e);\n      return;\n    }\n    handler.func(stream);\n  });\n}\n\n/**\n * User provided method to handle client streaming methods on the server.\n * @callback grpc.Server~handleClientStreamingCall\n * @param {grpc~ServerReadableStream} call The call object\n * @param {grpc.Server~sendUnaryData} callback The callback to call to respond\n *     to the request\n */\n\n/**\n * Fully handle a client streaming call\n * @access private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleClientStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\nfunction handleClientStreaming(call, handler, metadata) {\n  var stream = new ServerReadableStream(call, metadata, handler.deserialize);\n  stream.on('error', function(error) {\n    handleError(call, error);\n  });\n  stream.waitForCancel();\n  handler.func(stream, function(err, value, trailer, flags) {\n    stream.terminate();\n    if (err) {\n      if (trailer) {\n        err.metadata = trailer;\n      }\n      handleError(call, err);\n    } else {\n      sendUnaryResponse(call, value, handler.serialize, trailer, flags);\n    }\n  });\n}\n\n/**\n * User provided method to handle bidirectional streaming calls on the server.\n * @callback grpc.Server~handleBidiStreamingCall\n * @param {grpc~ServerDuplexStream} call The call object\n */\n\n/**\n * Fully handle a bidirectional streaming call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleBidiStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {Metadata} metadata Metadata from the client\n */\nfunction handleBidiStreaming(call, handler, metadata) {\n  var stream = new ServerDuplexStream(call, metadata, handler.serialize,\n                                      handler.deserialize);\n  stream.waitForCancel();\n  handler.func(stream);\n}\n\nvar streamHandlers = {\n  unary: handleUnary,\n  server_stream: handleServerStreaming,\n  client_stream: handleClientStreaming,\n  bidi: handleBidiStreaming\n};\n\n/**\n * Constructs a server object that stores request handlers and delegates\n * incoming requests to those handlers\n * @memberof grpc\n * @constructor\n * @param {Object=} options Options that should be passed to the internal server\n *     implementation. The available options are listed in\n *     [this document]{@link https://grpc.github.io/grpc/core/group__grpc__arg__keys.html}.\n * @example\n * var server = new grpc.Server();\n * server.addProtoService(protobuf_service_descriptor, service_implementation);\n * server.bind('address:port', server_credential);\n * server.start();\n */\nfunction Server(options) {\n  this.handlers = {};\n  var server = new grpc.Server(options);\n  this._server = server;\n  this.started = false;\n}\n\n/**\n * Start the server and begin handling requests\n */\nServer.prototype.start = function() {\n  if (this.started) {\n    throw new Error('Server is already running');\n  }\n  var self = this;\n  this.started = true;\n  this._server.start();\n  /**\n   * Handles the SERVER_RPC_NEW event. If there is a handler associated with\n   * the requested method, use that handler to respond to the request. Then\n   * wait for the next request\n   * @param {grpc.internal~Event} event The event to handle with tag\n   *     SERVER_RPC_NEW\n   */\n  function handleNewCall(err, event) {\n    if (err) {\n      return;\n    }\n    var details = event.new_call;\n    var call = details.call;\n    var method = details.method;\n    var metadata = Metadata._fromCoreRepresentation(details.metadata);\n    if (method === null) {\n      return;\n    }\n    self._server.requestCall(handleNewCall);\n    var handler;\n    if (self.handlers.hasOwnProperty(method)) {\n      handler = self.handlers[method];\n    } else {\n      var batch = {};\n      batch[grpc.opType.SEND_INITIAL_METADATA] =\n          (new Metadata())._getCoreRepresentation();\n      batch[grpc.opType.SEND_STATUS_FROM_SERVER] = {\n        code: constants.status.UNIMPLEMENTED,\n        details: 'RPC method not implemented ' + method,\n        metadata: (new Metadata())._getCoreRepresentation()\n      };\n      batch[grpc.opType.RECV_CLOSE_ON_SERVER] = true;\n      call.startBatch(batch, function() {});\n      return;\n    }\n    streamHandlers[handler.type](call, handler, metadata);\n  }\n  this._server.requestCall(handleNewCall);\n};\n\n/**\n * Unified type for application handlers for all types of calls\n * @typedef {(grpc.Server~handleUnaryCall\n *            |grpc.Server~handleClientStreamingCall\n *            |grpc.Server~handleServerStreamingCall\n *            |grpc.Server~handleBidiStreamingCall)} grpc.Server~handleCall\n */\n\n/**\n * Registers a handler to handle the named method. Fails if there already is\n * a handler for the given method. Returns true on success\n * @param {string} name The name of the method that the provided function should\n *     handle/respond to.\n * @param {grpc.Server~handleCall} handler Function that takes a stream of\n *     request values and returns a stream of response values\n * @param {grpc~serialize} serialize Serialization function for responses\n * @param {grpc~deserialize} deserialize Deserialization function for requests\n * @param {('unary'|'client_stream'|'server_stream'|'bidi')} type The streaming type of method that this handles\n * @return {boolean} True if the handler was set. False if a handler was already\n *     set for that name.\n */\nServer.prototype.register = function(name, handler, serialize, deserialize,\n                                     type) {\n  if (this.handlers.hasOwnProperty(name)) {\n    return false;\n  }\n  this.handlers[name] = {\n    func: handler,\n    serialize: serialize,\n    deserialize: deserialize,\n    type: type\n  };\n  return true;\n};\n\n/**\n * Gracefully shuts down the server. The server will stop receiving new calls,\n * and any pending calls will complete. The callback will be called when all\n * pending calls have completed and the server is fully shut down. This method\n * is idempotent with itself and forceShutdown.\n * @param {function()} callback The shutdown complete callback\n */\nServer.prototype.tryShutdown = function(callback) {\n  this._server.tryShutdown(callback);\n};\n\n/**\n * Forcibly shuts down the server. The server will stop receiving new calls\n * and cancel all pending calls. When it returns, the server has shut down.\n * This method is idempotent with itself and tryShutdown, and it will trigger\n * any outstanding tryShutdown callbacks.\n */\nServer.prototype.forceShutdown = function() {\n  this._server.forceShutdown();\n};\n\nvar unimplementedStatusResponse = {\n  code: constants.status.UNIMPLEMENTED,\n  details: 'The server does not implement this method'\n};\n\nvar defaultHandler = {\n  unary: function(call, callback) {\n    callback(unimplementedStatusResponse);\n  },\n  client_stream: function(call, callback) {\n    callback(unimplementedStatusResponse);\n  },\n  server_stream: function(call) {\n    call.emit('error', unimplementedStatusResponse);\n  },\n  bidi: function(call) {\n    call.emit('error', unimplementedStatusResponse);\n  }\n};\n\nfunction isObject(thing) {\n  return (typeof thing === 'object' || typeof thing === 'function') && thing !== null;\n}\n\n/**\n * Add a service to the server, with a corresponding implementation.\n * @param {grpc~ServiceDefinition} service The service descriptor\n * @param {Object<String, grpc.Server~handleCall>} implementation Map of method\n *     names to method implementation for the provided service.\n */\nServer.prototype.addService = function(service, implementation) {\n  if (!isObject(service) || !isObject(implementation)) {\n    throw new Error('addService requires two objects as arguments');\n  }\n  if (Object.keys(service).length === 0) {\n    throw new Error('Cannot add an empty service to a server');\n  }\n  if (this.started) {\n    throw new Error('Can\\'t add a service to a started server.');\n  }\n  var self = this;\n  Object.keys(service).forEach(name => {\n    const attrs = service[name];\n    var method_type;\n    if (attrs.requestStream) {\n      if (attrs.responseStream) {\n        method_type = 'bidi';\n      } else {\n        method_type = 'client_stream';\n      }\n    } else {\n      if (attrs.responseStream) {\n        method_type = 'server_stream';\n      } else {\n        method_type = 'unary';\n      }\n    }\n    var impl;\n    if (implementation[name] === undefined) {\n      /* Handle the case where the method is passed with the name exactly as\n         written in the proto file, instead of using JavaScript function\n         naming style */\n      if (implementation[attrs.originalName] === undefined) {\n        common.log(constants.logVerbosity.ERROR, 'Method handler ' + name +\n            ' for ' + attrs.path + ' expected but not provided');\n        impl = defaultHandler[method_type];\n      } else {\n        impl = implementation[attrs.originalName].bind(implementation);\n      }\n    } else {\n      impl = implementation[name].bind(implementation);\n    }\n    var serialize = attrs.responseSerialize;\n    var deserialize = attrs.requestDeserialize;\n    var register_success = self.register(attrs.path, impl, serialize,\n                                         deserialize, method_type);\n    if (!register_success) {\n      throw new Error('Method handler for ' + attrs.path +\n          ' already provided.');\n    }\n  });\n};\n\n/**\n * Add a proto service to the server, with a corresponding implementation\n * @deprecated Use {@link grpc.Server#addService} instead\n * @param {Protobuf.Reflect.Service} service The proto service descriptor\n * @param {Object<String, grpc.Server~handleCall>} implementation Map of method\n *     names to method implementation for the provided service.\n */\nServer.prototype.addProtoService = util.deprecate(function(service,\n                                                           implementation) {\n  var options;\n  var protobuf_js_5_common = require('./protobuf_js_5_common');\n  var protobuf_js_6_common = require('./protobuf_js_6_common');\n  if (protobuf_js_5_common.isProbablyProtobufJs5(service)) {\n    options = Object.assign({}, common.defaultGrpcOptions, service.grpc_options);\n    this.addService(\n        protobuf_js_5_common.getProtobufServiceAttrs(service, options),\n        implementation);\n  } else if (protobuf_js_6_common.isProbablyProtobufJs6(service)) {\n    options = Object.assign({}, common.defaultGrpcOptions, service.grpc_options);\n    this.addService(\n        protobuf_js_6_common.getProtobufServiceAttrs(service, options),\n        implementation);\n  } else {\n    // We assume that this is a service attributes object\n    this.addService(service, implementation);\n  }\n}, 'Server#addProtoService: Use Server#addService instead');\n\n/**\n * Binds the server to the given port, with SSL disabled if creds is an\n * insecure credentials object\n * @param {string} port The port that the server should bind on, in the format\n *     \"address:port\"\n * @param {grpc.ServerCredentials} creds Server credential object to be used for\n *     SSL. Pass an insecure credentials object for an insecure port.\n * @return {number} The bound port number. Negative if binding the port failed.\n */\nServer.prototype.bind = function(port, creds) {\n  if (this.started) {\n    throw new Error('Can\\'t bind an already running server to an address');\n  }\n  return this._server.addHttp2Port(port, creds);\n};\n\n/**\n * Called with the result of attempting to bind a port\n * @callback grpc.Server~bindCallback\n * @param {Error=} error If non-null, indicates that binding the port failed.\n * @param {number} port The bound port number. If binding the port fails, this\n *     will be negative to match the output of bind.\n */\n\n/**\n * Binds the server to the given port, with SSL disabled if creds is an\n * insecure credentials object. Provides the result asynchronously.\n * @param {string} port The port that the server should bind on, in the format\n *     \"address:port\"\n * @param {grpc.ServerCredentials} creds Server credential object to be used for\n *     SSL. Pass an insecure credentials object for an insecure port.\n */\nServer.prototype.bindAsync = function(port, creds, callback) {\n  /* This can throw. We do not try to catch that error because it indicates an\n   * incorrect use of the function, which should not be surfaced asynchronously\n   */\n  const result = this.bind(port, creds)\n  if (result < 0) {\n    setImmediate(callback, new Error('Failed to bind port'), result);\n  } else {\n    setImmediate(callback, null, result);\n  }\n}\n\nexports.Server = Server;\n"]},"metadata":{},"sourceType":"script"}